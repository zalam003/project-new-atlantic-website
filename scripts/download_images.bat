@echo off
setlocal enabledelayedexpansion

REM New Atlantic Image Downloader Script (Windows)
REM Downloads all images from the New Atlantic website and organizes them

echo New Atlantic Image Downloader (Windows)
echo ======================================
echo.

REM Configuration
set "WEBSITE_URL=https://newatlantic.biz"
set "WEBSITE_ALT=https://www.newatlantic.biz"
set "BASE_DIR=%cd%\public\images"
set "TEMP_DIR=%cd%\temp_wget"
set "LOG_FILE=%cd%\image_download.log"

REM Check if we're in the right directory
if not exist "package.json" (
    echo [ERROR] Please run this script from the project root directory ^(where package.json is located^)
    pause
    exit /b 1
)

if not exist "public" (
    echo [ERROR] Public directory not found. Please run from project root directory.
    pause
    exit /b 1
)

REM Check if wget is installed
echo [INFO] Checking dependencies...
where wget >nul 2>&1
if errorlevel 1 (
    echo [ERROR] wget is not installed or not in PATH.
    echo Please install wget for Windows from: https://eternallybored.org/misc/wget/
    echo Or use chocolatey: choco install wget
    echo Or use scoop: scoop install wget
    pause
    exit /b 1
)

echo [SUCCESS] wget found
echo.

REM Create directory structure
echo [INFO] Setting up directory structure...
if not exist "%BASE_DIR%" mkdir "%BASE_DIR%"
if not exist "%BASE_DIR%\products" mkdir "%BASE_DIR%\products"
if not exist "%BASE_DIR%\logos" mkdir "%BASE_DIR%\logos"
if not exist "%BASE_DIR%\hero" mkdir "%BASE_DIR%\hero"
if not exist "%BASE_DIR%\process" mkdir "%BASE_DIR%\process"
if not exist "%BASE_DIR%\team" mkdir "%BASE_DIR%\team"
if not exist "%BASE_DIR%\misc" mkdir "%BASE_DIR%\misc"
if not exist "%TEMP_DIR%" mkdir "%TEMP_DIR%"

echo [SUCCESS] Directories created
echo.

REM Download website with images
echo [INFO] Downloading website content...
echo %date% %time%: Starting wget download > "%LOG_FILE%"

REM Primary download attempt
wget ^
    --recursive ^
    --level=3 ^
    --no-clobber ^
    --page-requisites ^
    --html-extension ^
    --convert-links ^
    --restrict-file-names=windows ^
    --domains=newatlantic.biz,www.newatlantic.biz ^
    --no-parent ^
    --accept=jpg,jpeg,png,gif,svg,webp,ico ^
    --directory-prefix="%TEMP_DIR%" ^
    --append-output="%LOG_FILE%" ^
    --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" ^
    --tries=3 ^
    --timeout=30 ^
    "%WEBSITE_URL%" "%WEBSITE_ALT%"

if errorlevel 1 (
    echo [WARNING] Primary download had some errors. Trying specific pages...
    
    REM Try specific pages
    for %%p in ("" "about-us/" "category/fashion/" "contact-us/" "avant_products/") do (
        echo [INFO] Downloading from: %WEBSITE_URL%/%%p
        wget ^
            --recursive ^
            --level=2 ^
            --no-clobber ^
            --page-requisites ^
            --accept=jpg,jpeg,png,gif,svg,webp,ico ^
            --directory-prefix="%TEMP_DIR%" ^
            --append-output="%LOG_FILE%" ^
            --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" ^
            --tries=2 ^
            --timeout=20 ^
            "%WEBSITE_URL%/%%~p" 2>nul
    )
)

echo [SUCCESS] Download completed
echo.

REM Categorize and organize images
echo [INFO] Categorizing and organizing images...

set "images_processed=0"

REM Process all downloaded images
for /r "%TEMP_DIR%" %%f in (*.jpg *.jpeg *.png *.gif *.svg *.webp *.ico) do (
    if exist "%%f" (
        call :process_image "%%f"
    )
)

echo [SUCCESS] Processed !images_processed! images
echo.

REM Generate simple inventory
echo [INFO] Generating image inventory...
set "inventory_file=%BASE_DIR%\..\lib\imageInventory.ts"

echo // Image inventory - Auto-generated by download script > "%inventory_file%"
echo // This file tracks all images collected from the New Atlantic website >> "%inventory_file%"
echo. >> "%inventory_file%"
echo export interface ImageAsset { >> "%inventory_file%"
echo   filename: string; >> "%inventory_file%"
echo   category: 'products' ^| 'logos' ^| 'hero' ^| 'process' ^| 'team' ^| 'misc'; >> "%inventory_file%"
echo   description: string; >> "%inventory_file%"
echo   altText: string; >> "%inventory_file%"
echo   usage: string[]; >> "%inventory_file%"
echo   optimized: boolean; >> "%inventory_file%"
echo   downloadDate: string; >> "%inventory_file%"
echo } >> "%inventory_file%"
echo. >> "%inventory_file%"
echo export const imageInventory: ImageAsset[] = [ >> "%inventory_file%"

REM Add images from each category to inventory
for %%c in (products logos hero process team misc) do (
    if exist "%BASE_DIR%\%%c\*.*" (
        for %%i in ("%BASE_DIR%\%%c\*.*") do (
            echo   { >> "%inventory_file%"
            echo     filename: '%%~nxi', >> "%inventory_file%"
            echo     category: '%%c', >> "%inventory_file%"
            echo     description: '%%~nxi from %%c category', >> "%inventory_file%"
            echo     altText: '%%~nxi', >> "%inventory_file%"
            echo     usage: [], >> "%inventory_file%"
            echo     optimized: false, >> "%inventory_file%"
            echo     downloadDate: '%date%' >> "%inventory_file%"
            echo   }, >> "%inventory_file%"
        )
    )
)

echo ]; >> "%inventory_file%"
echo. >> "%inventory_file%"
echo // Helper functions >> "%inventory_file%"
echo export const getImagesByCategory = ^(category: ImageAsset['category']^) =^> { >> "%inventory_file%"
echo   return imageInventory.filter^(image =^> image.category === category^); >> "%inventory_file%"
echo }; >> "%inventory_file%"
echo. >> "%inventory_file%"
echo export const getImagePath = ^(filename: string, category: string^) =^> { >> "%inventory_file%"
echo   return `/images/${category}/${filename}`; >> "%inventory_file%"
echo }; >> "%inventory_file%"

echo [SUCCESS] Inventory generated
echo.

REM Generate report
echo [INFO] Generating download report...
set "report_file=%cd%\image_download_report.txt"

echo New Atlantic Image Download Report > "%report_file%"
echo Generated: %date% %time% >> "%report_file%"
echo. >> "%report_file%"
echo SUMMARY: >> "%report_file%"

REM Count images in each category
for %%c in (products logos hero process team misc) do (
    set "count=0"
    if exist "%BASE_DIR%\%%c\*.*" (
        for %%i in ("%BASE_DIR%\%%c\*.*") do set /a count+=1
    )
    echo %%c: !count! images >> "%report_file%"
)

echo. >> "%report_file%"
echo DETAILS: >> "%report_file%"
echo Base directory: %BASE_DIR% >> "%report_file%"
echo Download log: %LOG_FILE% >> "%report_file%"
echo Inventory file: %inventory_file% >> "%report_file%"
echo. >> "%report_file%"
echo NEXT STEPS: >> "%report_file%"
echo 1. Review downloaded images for quality and relevance >> "%report_file%"
echo 2. Optimize images for web use ^(compress, resize^) >> "%report_file%"
echo 3. Update image descriptions and alt text in inventory >> "%report_file%"
echo 4. Replace placeholder images in React components >> "%report_file%"
echo 5. Test image loading in development environment >> "%report_file%"

echo [SUCCESS] Report generated: %report_file%
echo.

REM Cleanup
echo [INFO] Cleaning up temporary files...
if exist "%TEMP_DIR%" (
    rmdir /s /q "%TEMP_DIR%"
    echo [SUCCESS] Temporary directory removed
)

echo.
echo [SUCCESS] === DOWNLOAD COMPLETE ===
echo.
type "%report_file%"

pause
goto :eof

REM Function to process individual images
:process_image
set "image_path=%~1"
set "filename=%~nx1"
set "name=%~n1"
set "extension=%~x1"

echo [INFO] Processing: %filename%

REM Remove dot from extension and convert to lowercase
set "extension=%extension:~1%"

REM Default category
set "category=misc"
set "new_name=%filename%"

REM Categorize based on filename patterns
echo %filename% | findstr /i "logo brand icon favicon" >nul && (
    set "category=logos"
    set "new_name=logo-%name%.%extension%"
)

echo %filename% | findstr /i "product garment shirt pant jacket coat wear apparel cloth fabric mask msk" >nul && (
    set "category=products"
    set "new_name=product-%name%.%extension%"
)

echo %filename% | findstr /i "hero banner header slide main background bg" >nul && (
    set "category=hero"
    set "new_name=hero-%name%.%extension%"
)

echo %filename% | findstr /i "process manufacturing factory production quality compliance" >nul && (
    set "category=process"
    set "new_name=process-%name%.%extension%"
)

echo %filename% | findstr /i "team staff employee about people person" >nul && (
    set "category=team"
    set "new_name=team-%name%.%extension%"
)

echo %filename% | findstr /i "favicon" >nul && (
    set "category=logos"
    set "new_name=favicon.%extension%"
)

REM Copy to appropriate directory
set "target_dir=%BASE_DIR%\!category!"
set "target_file=!target_dir!\!new_name!"

REM Handle duplicates
set "counter=1"
:check_duplicate
if exist "!target_file!" (
    set /a counter+=1
    set "name_part=%~n1"
    set "target_file=!target_dir!\!name_part!-!counter!.%extension%"
    goto check_duplicate
)

copy "%image_path%" "!target_file!" >nul
echo [SUCCESS] Copied to: !category!/!new_name!

set /a images_processed+=1
goto :eof
